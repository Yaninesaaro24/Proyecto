//Ubicacion.h//
#pragma once
#include <fstream>
#include <string>
using namespace std;

class Zona {
private:
    char norte;
    char sur;
    char este;
    char oeste;
    string anillos[12];

public:
    Zona();
    Zona(char n, char s, char e, char o, string a[]);
    void setZona(char n, char s, char e, char o, string a[]);
    char getNorte();
    char getSur();
    char getEste();
    char getOeste();
    string* getAnillos(); // Corrección: Declaración correcta del método getAnillos
    void guardarArchivo(ofstream& fsalida);
    bool leerArchivo(ifstream& fentrada);
    bool eliminar(const string& nombreArchivo); // Corrección: Cambio de tipo de archivo fstream a string&
    bool modificar(const string& nombreArchivo, int nroReg, const Zona& nuevaZona); // Corrección: Cambio de tipo de archivo fstream a string&
    bool buscar(const string& nombreArchivo, int nroReg, Zona& zonaEncontrada); // Corrección: Cambio de tipo de archivo fstream a string&
    int getTamBytesRegistro();
};
//Ubicacion.cpp//
include <iostream>
#include <fstream>
#include <string>
#include "Zona.h"

using namespace std;

// Implementación de los métodos de la clase Zona

Zona::Zona() {}

Zona::Zona(char n, char s, char e, char o, string a[]) {
    norte = n;
    sur = s;
    este = e;
    oeste = o;
    for (int i = 0; i < 12; ++i) {
        anillos[i] = a[i];
    }
}

char Zona::getNorte() {
    return norte;
}

char Zona::getSur() {
    return sur;
}

char Zona::getEste() {
    return este;
}

char Zona::getOeste() {
    return oeste;
}

string* Zona::getAnillos() {
    return anillos;
}

void Zona::guardarArchivo(ofstream& fsalida) {
    fsalida.write(reinterpret_cast<const char*>(&norte), sizeof(norte));
    fsalida.write(reinterpret_cast<const char*>(&sur), sizeof(sur));
    fsalida.write(reinterpret_cast<const char*>(&este), sizeof(este));
    fsalida.write(reinterpret_cast<const char*>(&oeste), sizeof(oeste));
    for (int i = 0; i < 12; ++i) {
        int size = anillos[i].size();
        fsalida.write(reinterpret_cast<const char*>(&size), sizeof(size));
        fsalida.write(anillos[i].c_str(), size);
    }
}

bool Zona::leerArchivo(ifstream& fentrada) {
    fentrada.read(reinterpret_cast<char*>(&norte), sizeof(norte));
    fentrada.read(reinterpret_cast<char*>(&sur), sizeof(sur));
    fentrada.read(reinterpret_cast<char*>(&este), sizeof(este));
    fentrada.read(reinterpret_cast<char*>(&oeste), sizeof(oeste));
    for (int i = 0; i < 12; ++i) {
        int size;
        fentrada.read(reinterpret_cast<char*>(&size), sizeof(size));
        char* buffer = new char[size + 1];
        fentrada.read(buffer, size);
        buffer[size] = '\0';
        anillos[i] = string(buffer);
        delete[] buffer;
    }
    return true;
}

bool Zona::eliminar(const string& nombreArchivo) {
    if (remove(nombreArchivo.c_str()) == 0) {
        return true;
    }
    else {
        return false;
    }
}

bool Zona::modificar(const string& nombreArchivo, int nroReg, const Zona& nuevaZona) {
    fstream archivo(nombreArchivo, ios::in | ios::out | ios::binary);
    if (!archivo.is_open()) {
        return false; // No se pudo abrir el archivo
    }

    // Calcular la posición del registro a modificar
    int pos = nroReg * getTamBytesRegistro();

    // Ir a la posición del registro
    archivo.seekp(pos);

    // Escribir la nueva zona en el archivo
    nuevaZona.guardarArchivo(archivo);

    archivo.close();
    return true;
}

bool Zona::buscar(const string& nombreArchivo, int nroReg, Zona& zonaEncontrada) {
    ifstream archivo(nombreArchivo, ios::binary);
    if (!archivo.is_open()) {
        return false; // No se pudo abrir el archivo
    }

    // Calcular la posición del registro a buscar
    int pos = nroReg * getTamBytesRegistro();

    // Ir a la posición del registro
    archivo.seekg(pos);

    // Leer la zona desde el archivo
    zonaEncontrada.leerArchivo(archivo);

    archivo.close();
    return true;
}

int Zona::getTamBytesRegistro() {
    int tamRegistro = sizeof(norte) + sizeof(sur) + sizeof(este) + sizeof(oeste);
    for (int i = 0; i < 12; ++i) {
        tamRegistro += sizeof(int); // tamaño de la cadena de anillos
        tamRegistro += anillos[i].size();
    }
    return tamRegistro;
}
